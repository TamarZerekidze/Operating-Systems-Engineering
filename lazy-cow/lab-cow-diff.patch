diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..e524fc3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,7 +63,11 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
-
+int             addrefer(uint64);
+int             subrefer(uint64);
+int             getrefer(uint64);
+int             cowpage(pagetable_t pagetable, uint64 va);
+int             cowalloc(pagetable_t pagetable, uint64 va);
 // log.c
 void            initlog(int, struct superblock*);
 void            log_write(struct buf*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..e38e8ba 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -14,6 +14,67 @@ void freerange(void *pa_start, void *pa_end);
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+int refer[PHYSTOP/ PGSIZE];
+struct spinlock rf_lock;
+
+int addrefer(uint64 pa){
+  int ans;
+  acquire(&rf_lock);
+  ans = refer[pa/PGSIZE];
+  ans++;
+  refer[pa/PGSIZE] = ans;
+  release(&rf_lock);
+  return ans;
+}
+
+int subrefer(uint64 pa){
+  int ans;
+  acquire(&rf_lock);
+  ans = refer[pa/PGSIZE];
+  ans--;
+  refer[pa/PGSIZE] = ans;
+  release(&rf_lock);
+  return ans;
+}
+
+int getrefer(uint64 pa){
+  return refer[pa/PGSIZE];
+}
+
+int cowpage(pagetable_t pagetable, uint64 va) {
+  if(va >= MAXVA)
+    return -1;
+  pte_t* pte = walk(pagetable, va, 0);
+  if(pte == 0)
+    return -1;
+  if((*pte & PTE_V) == 0)
+    return -1;
+  if((*pte & PTE_U) == 0)
+    return -1;
+  if((*pte & PTE_COW) == 0)
+    return -1;
+  return 0;
+}
+int cowalloc(pagetable_t pagetable, uint64 va) {
+
+  pte_t* pte = walk(pagetable, va, 0);
+  uint64 pa = PTE2PA(*pte);
+
+  char* mem = kalloc();
+  if(mem == 0)
+    return 0;
+
+  memmove(mem, (void*)pa, PGSIZE);
+  *pte &= ~PTE_V;
+
+  kfree((void*)PGROUNDDOWN(pa));
+  if(mappages(pagetable, va, PGSIZE, (uint64)mem, (PTE_FLAGS(*pte) | PTE_W) & ~PTE_COW) != 0) {
+    kfree(mem);
+    *pte |= PTE_V;
+    return 0;
+  }
+  return 1;
+}
 struct run {
   struct run *next;
 };
@@ -27,6 +88,7 @@ void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&rf_lock, "refer");
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -35,6 +97,7 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
+  memset(refer, 1, PHYSTOP / PGSIZE);
   for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
     kfree(p);
 }
@@ -51,6 +114,8 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  if(subrefer((uint64)pa) > 0)
+    return;
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -76,7 +141,9 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r){
     memset((char*)r, 5, PGSIZE); // fill with junk
+    refer[(uint64)r / PGSIZE] = 1;
+  }
   return (void*)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..db5aadd 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,7 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
-
+#define PTE_COW (1L << 8)
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..8f357e0 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,11 +67,15 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    setkilled(p);
-  }
+    } else if(r_scause() == 15 || r_scause() == 13){
+      uint64 val = r_stval();
+      if(val >= p->sz || cowpage(p->pagetable, val) != 0 || cowalloc(p->pagetable, PGROUNDDOWN(val)) == 0)
+        p->killed = 1;
+    } else {
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+    }
 
   if(killed(p))
     exit(-1);
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..a505e4b 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -315,7 +315,6 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -324,13 +323,15 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    if(flags & PTE_W) {
+      flags &= ~PTE_W;
+      flags |= PTE_COW;
+      *pte = PA2PTE(pa) | flags;
+    }
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
       goto err;
     }
+    addrefer(pa);
   }
   return 0;
 
@@ -365,10 +366,14 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
     va0 = PGROUNDDOWN(dstva);
     if(va0 >= MAXVA)
       return -1;
+
     pte = walk(pagetable, va0, 0);
-    if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0 ||
-       (*pte & PTE_W) == 0)
+
+    if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0)
       return -1;
+    if ((*pte & PTE_W) == 0 && (cowpage(pagetable, va0) != 0 || cowalloc(pagetable, va0) == 0))
+      return -1;
+    pte = walk(pagetable, va0, 0);
     pa0 = PTE2PA(*pte);
     n = PGSIZE - (dstva - va0);
     if(n > len)
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..bf0d87a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+4
\ No newline at end of file
